
pipeline Temp_Data {
// Pipeline blocks define
    JaveeDataFetcher
        -> ZipFileInterpreter
        -> TargetFileSelector
        -> FileContentReader
        -> CSVFileProcessor
        -> ColumnNameModifier
        -> TempLabelling
        -> TableLabelling
        -> CelsiusToFahrenheitConverter
        -> ConvertBatteryTempToFahrenheit
        -> DataTableSaver;
// File fetcher from URL
    block JaveeDataFetcher oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }
// Archeive Zip
    block ZipFileInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }
// Target Data Selector
    block TargetFileSelector oftype FilePicker {
        path: './data.csv';
    }
// File content accepter 
    block FileContentReader oftype TextFileInterpreter { }
// CSV File processing phase
    block CSVFileProcessor oftype CSVInterpreter {
        delimiter: ";";
    }
// Name modification of the column 
    block ColumnNameModifier oftype CellWriter {
        at: range A1:E1;
        write: [
            "id",
            "producer",
            "model",
            "month",
            "temperature"
        ];
    }
// Labelling the table with the specific cell
    block TempLabelling oftype CellWriter {
        at: cell J1;
        write: [
            "battery_temperature"
        ];
    }
// Labelling all the table with the type of the content
    block TableLabelling oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype PositiveIntegerType,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype MonthType,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }
// Conversion of the data celsius to F
    transform CelsiusToFahrenheitTransposer {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: (Celsius * 9/5) + 32;
    }
// Defining the input column 
    block CelsiusToFahrenheitConverter oftype TableTransformer {
        inputColumns: [
            'temperature'
        ];
        outputColumn: 'temperature';
        uses: CelsiusToFahrenheitTransposer;
    }
// Battery temparature conversion
    block ConvertBatteryTempToFahrenheit oftype TableTransformer {
        inputColumns: [
            'battery_temperature'
        ];
        outputColumn: 'battery_temperature';
        uses: CelsiusToFahrenheitTransposer;
    }
// Saving the data on the sqlite file
    block DataTableSaver oftype SQLiteLoader {
        table: 'temperatures';
        file: 'temperatures.sqlite';
    }
}
// Defining the positve value for the constraint with the value
constraint PositiveConstraint on integer: value > 0;
// Defining the value for the type of attribute
valuetype PositiveIntegerType oftype integer {
    constraints: [
        PositiveConstraint
    ];
}
// Evaluating the month constraint with the value
constraint MonthConstraint on integer: value >= 1 and value <= 12;
// Defining the month value with constraints
valuetype MonthType oftype integer {
    constraints: [
        MonthConstraint
    ];
}
